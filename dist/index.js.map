{"version":3,"sources":["../src/actions/news.ts","../src/index.ts"],"sourcesContent":["import {\n    ActionExample,\n    Content,\n    generateText,\n    HandlerCallback,\n    IAgentRuntime,\n    Memory,\n    ModelClass,\n    State,\n    type Action,\n} from \"@elizaos/core\";\n\n\nexport const currentNewsAction: Action = {\n    name: \"CURRENT_NEWS\",\n    similes: [\"NEWS\", \"GET_NEWS\", \"GET_CURRENT_NEWS\"],\n    validate: async (_runtime: IAgentRuntime, _message: Memory) => {\n        const apiKey = _runtime.getSetting('NEWS_API_KEY');\n        if (!apiKey) {\n            throw new Error('NEWS_API_KEY environment variable is not set');\n        }\n        return true;\n    },\n    description:\n        \"Get the latest news about a specific topic if asked by the user.\",\n    handler: async (\n        _runtime: IAgentRuntime,\n        _message: Memory,\n        _state: State,\n        _options: { [key: string]: unknown; },\n        _callback: HandlerCallback,\n    ): Promise<boolean> => {\n        async function getCurrentNews(searchTerm: string) {\n            try {\n                const enhancedSearchTerm = encodeURIComponent(`\"${searchTerm}\" AND (Spain OR Spanish OR Madrid OR Felipe)`);\n\n                const [everythingResponse, headlinesResponse] = await Promise.all([\n                    fetch(\n                        `https://newsapi.org/v2/everything?q=${enhancedSearchTerm}&sortBy=relevancy&language=en&pageSize=50&apiKey=${_runtime.getSetting('NEWS_API_KEY')}`\n                    ),\n                    fetch(\n                        `https://newsapi.org/v2/top-headlines?q=${searchTerm}&country=es&language=en&pageSize=50&apiKey=${_runtime.getSetting('NEWS_API_KEY')}`\n                    )\n                ]);\n\n                const [everythingData, headlinesData] = await Promise.all([\n                    everythingResponse.json(),\n                    headlinesResponse.json()\n                ]);\n\n                // Combine and filter articles\n                const allArticles = [\n                    ...(headlinesData.articles || []),\n                    ...(everythingData.articles || [])\n                ].filter(article =>\n                    article.title &&\n                    article.description &&\n                    (article.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                     article.description.toLowerCase().includes(searchTerm.toLowerCase()))\n                );\n\n                // Remove duplicates and get up to 15 articles\n                const uniqueArticles = Array.from(\n                    new Map(allArticles.map(article => [article.title, article])).values()\n                ).slice(0, 15);\n\n                if (!uniqueArticles.length) {\n                    return \"No news articles found.\";\n                }\n\n                return uniqueArticles.map((article, index) => {\n                    const content = article.description || 'No content available';\n                    const urlDomain = article.url ? new URL(article.url).hostname : '';\n                    return [\n                        `üì∞ Article ${index + 1}`,\n                        '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ',\n                        `üìå **${article.title || 'No title'}**\\n`,\n                        `üìù ${content}\\n`,\n                        `üîó Read more at: ${urlDomain}`\n                    ].join('\\n');\n                }).join('\\n');\n            } catch (error) {\n                console.error('Failed to fetch news:', error);\n                return 'Sorry, there was an error fetching the news.';\n            }\n        }\n\n        const context = `What is the specific topic or subject the user wants news about? Extract ONLY the search term from this message: \"${_message.content.text}\". Return just the search term with no additional text, punctuation, or explanation.`\n\n        const searchTerm = await generateText({\n            runtime: _runtime,\n            context,\n            modelClass: ModelClass.SMALL,\n            stop: [\"\\n\"],\n        });\n\n        // For debugging\n        console.log(\"Search term extracted:\", searchTerm);\n\n        const currentNews = await getCurrentNews(searchTerm);\n        const responseText = ` *protocol droid noises*\\n\\n${currentNews}`;\n\n\n        const newMemory: Memory = {\n            userId: _message.agentId,\n            agentId: _message.agentId,\n            roomId: _message.roomId,\n            content: {\n                text: responseText,\n                action: \"CURRENT_NEWS_RESPONSE\",\n                source: _message.content?.source,\n            } as Content,\n        };\n\n        await _runtime.messageManager.createMemory(newMemory);\n\n        _callback(newMemory.content);\n        return true;\n\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"what's the latest news about <searchTerm>?\" },\n            },\n            {\n                user: \"{{user2}}\",\n                content: { text: \"\", action: \"CURRENT NEWS\" },\n            },\n        ],\n\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"can you show me the latest news about <searchTerm>?\" },\n            },\n            {\n                user: \"{{user2}}\",\n                content: { text: \"\", action: \"CURRENT NEWS\" },\n            },\n        ],\n\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"what's in the <searchTerm> news today?\" },\n            },\n            {\n                user: \"{{user2}}\",\n                content: { text: \"\", action: \"CURRENT NEWS\" },\n            },\n        ],\n\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"show me current events about <searchTerm>?\" },\n            },\n            {\n                user: \"{{user2}}\",\n                content: { text: \"\", action: \"CURRENT NEWS\" },\n            },\n        ],\n\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"what's going on in the world of <searchTerm>?\" },\n            },\n            {\n                user: \"{{user2}}\",\n                content: { text: \"\", action: \"CURRENT NEWS\" },\n            },\n        ],\n\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"give me the latest headlines about <searchTerm>?\" },\n            },\n            {\n                user: \"{{user2}}\",\n                content: { text: \"\", action: \"CURRENT NEWS\" },\n            },\n        ],\n\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"show me news updates about <searchTerm>?\" },\n            },\n            {\n                user: \"{{user2}}\",\n                content: { text: \"\", action: \"CURRENT NEWS\" },\n            },\n        ],\n\n        [\n            {\n                user: \"{{user1}}\",\n                content: { text: \"what are today's top stories about <searchTerm>?\" },\n            },\n            {\n                user: \"{{user2}}\",\n                content: { text: \"\", action: \"CURRENT NEWS\" },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;","import { Plugin } from \"@elizaos/core\";\nimport { currentNewsAction } from \"./actions/news\";\n\nexport const newsPlugin: Plugin = {\n    name: \"newsPlugin\",\n    description: \"Get the latest news about a specific topic if asked by the user.\",\n    actions: [currentNewsAction],\n};\n\nexport default newsPlugin;\n"],"mappings":"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","names":["searchTerm"]}